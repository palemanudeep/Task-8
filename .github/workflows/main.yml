name: Deploy or Destroy Medusa

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Select the action to perform'
        required: true
        default: 'apply'
        type: choice
        options:
          - apply
          - destroy

jobs:
  terraform:
    name: Provision Infrastructure with Terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
         terraform_version: 1.5.0  # Use your Terraform version here
        
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init
        run: |
         cd terraform
         terraform init

      - name: Terraform Plan
        run: |
         cd terraform
         terraform plan

      - name: Terraform Apply or Destroy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
           cd terraform
           if [ "${{ github.event.inputs.action }}" == "apply" ]; then
             terraform apply -auto-approve -var "db_password=${{ secrets.DB_PASSWORD }}";
           elif [ "${{ github.event.inputs.action }}" == "destroy" ]; then
             terraform destroy -auto-approve;
           fi

  pull_tag_push_image:
    name: Pull from Docker Hub, Tag, and Push to ECR
    runs-on: ubuntu-latest
    needs: terraform
    if: ${{ github.event.inputs.action == 'apply' }}  # Only run if 'apply' is selected
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region
